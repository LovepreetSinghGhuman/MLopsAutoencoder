name: Build_and_Deploy

on:
  push:
    branches:
      - main

# =============================================================================
# CI/CD Workflow for Fraud Detection Autoencoder (Azure ML & AKS)
#
# Purpose:
#   Automates the end-to-end lifecycle of a fraud detection model using Azure ML and AKS.
#
# Workflow Overview:
#   1. **Build & Train**:
#      - Checks out repository code.
#      - Authenticates with Azure using GitHub secrets.
#      - Installs Azure CLI and ML extension for job management.
#      - Ensures all relevant files are UTF-8 encoded for compatibility.
#      - Submits a training job to Azure ML (using deployment/train-job.yaml).
#      - Waits for training completion and downloads model artifacts.
#      - Flattens and verifies the model artifact directory structure.
#      - Registers the trained model in Azure ML for versioning and tracking.
#      - Builds a Docker image for the trained model and pushes it to Azure Container Registry (ACR).
#
#   2. **Deploy**:
#      - Authenticates with Azure and sets AKS context.
#      - Updates the AKS deployment to use the new image, rolling out the new model version.
#
# Key Azure Resources:
#   - Azure ML Workspace: Manages experiments, jobs, and model registry.
#   - Azure Container Registry (ACR): Stores Docker images for model serving.
#   - Azure Kubernetes Service (AKS): Hosts the deployed model as a web service.
#
# Security & Best Practices:
#   - All Azure credentials and secrets are securely stored in GitHub Actions secrets.
#   - UTF-8 encoding is enforced to prevent runtime errors due to incompatible file encodings.
#   - Model versioning is handled via Azure ML's model registry.
#
# Customization:
#   - Update resource names, cluster names, and dataset assets as needed.
#   - The training job specification is defined in deployment/train-job.yaml.
#   - The Dockerfile for model serving is located at deployment/Dockerfile.
#
# Troubleshooting:
#   - If the workflow fails at encoding checks, ensure all source and data files are UTF-8.
#   - Azure CLI and ML extension installation steps are idempotent and safe to rerun.
#   - For deployment issues, check AKS logs and image tags.
#
# Stage Details:
#   - **UTF-8 Check**: Ensures all Python, CSV, and requirements files are UTF-8 encoded.
#   - **Training Job**: Submits and monitors an Azure ML job, waits for completion.
#   - **Artifact Handling**: Downloads, flattens, and verifies required model artifacts.
#   - **Model Registration**: Registers the new model version in Azure ML.
#   - **Containerization**: Builds and pushes a Docker image for the trained model.
#   - **Deployment**: Updates the AKS deployment to use the new Docker image.
# =============================================================================

env:
  ACR_LOGIN_SERVER: ${{ secrets.ACR_LOGIN_SERVER }}
  ACR_USERNAME: ${{ secrets.ACR_USERNAME }}
  ACR_PASSWORD: ${{ secrets.ACR_PASSWORD }}
  IMAGE_NAME: fraud-detector
  RESOURCE_GROUP: fraud-rg
  AML_WORKSPACE: fraud-workspace
  CLUSTER_NAME: fraudAKSCluster
  DEPLOYMENT_NAME: fraud-backend
  CONTAINER_NAME: fraud-detector
  NAMESPACE: default
  AML_TRAIN_DATA_ASSET: cleaned_train:2

jobs:
  build-and-train:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Install Azure CLI v2 and ML extension
        run: |
          set -e
          curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
          az version
          az extension add -n ml -y --upgrade

      - name: Ensure all files are UTF-8 encoded (check, convert if needed, verify)
        run: |
          echo "Checking encoding for requirements.txt, Python, and CSV files..."
          NON_UTF8=$(find src/ models/ deployment/requirements.txt -type f \( -name "*.py" -o -name "*.csv" -o -name "requirements.txt" \) 2>/dev/null | \
            xargs -I{} bash -c 'file -bi "{}" | grep -q "charset=utf-8" || echo "{}"')
          if [ -n "$NON_UTF8" ]; then
            echo "WARNING: Non-UTF-8 encoding detected in:"
            echo "$NON_UTF8"
            echo "Converting files to UTF-8..."
            python src/convert_to_utf8.py
            NON_UTF8=$(find src/ models/ deployment/requirements.txt -type f \( -name "*.py" -o -name "*.csv" -o -name "requirements.txt" \) 2>/dev/null | \
              xargs -I{} bash -c 'file -bi "{}" | grep -q "charset=utf-8" || echo "{}"')
            if [ -n "$NON_UTF8" ]; then
              echo "ERROR: The following files are still not UTF-8 encoded after conversion:"
              echo "$NON_UTF8"
              exit 1
            fi
          else
            echo "All files are UTF-8 encoded."
          fi

      - name: Submit Azure ML training job and wait for completion
        id: submit_job
        run: |
          set -e
          JOB_NAME=$(az ml job create \
            --file deployment/train-job.yaml \
            --resource-group $RESOURCE_GROUP \
            --workspace-name $AML_WORKSPACE \
            --query name -o tsv)
          echo "job_name=$JOB_NAME" >> $GITHUB_OUTPUT
          while true; do
            STATUS=$(az ml job show --name "$JOB_NAME" --resource-group $RESOURCE_GROUP --workspace-name $AML_WORKSPACE --query status -o tsv)
            echo "Current job status: $STATUS"
            if [[ "$STATUS" == "Completed" || "$STATUS" == "Failed" || "$STATUS" == "Canceled" ]]; then
              break
            fi
            sleep 30
          done

      - name: Download, flatten, and verify model artifacts
        run: |
          set -e
          rm -rf ./models
          JOB_NAME="${{ steps.submit_job.outputs.job_name }}"
          az ml job download --name "$JOB_NAME" --resource-group $RESOURCE_GROUP --workspace-name $AML_WORKSPACE --output-name model_dir --download-path ./models

          # Flatten model directory structure
          find ./models -type f -name 'autoencoder.keras' -exec cp {} ./models/ \;
          find ./models -type f -name 'scaler.joblib' -exec cp {} ./models/ \;
          find ./models -type f -name 'autoencoder_config.json' -exec cp {} ./models/ \;
          find ./models -type f -name 'threshold.json' -exec cp {} ./models/ \;

          # Check for required artifacts
          REQUIRED_FILES="autoencoder.keras scaler.joblib autoencoder_config.json threshold.json"
          for f in $REQUIRED_FILES; do
            if [ ! -f "./models/$f" ]; then
              echo "ERROR: Required model artifact ./models/$f not found!"
              ls -lR ./models
              exit 1
            fi
          done

          echo "âœ… All required model artifacts are present."
          ls -lR ./models

      - name: Register new model version in Azure ML
        run: |
          az ml model create --name fraud_detector_autoencoder --path ./models --resource-group $RESOURCE_GROUP --workspace-name $AML_WORKSPACE

      - name: Build and push Docker image for Autoencoder
        run: |
          IMAGE_TAG=$ACR_LOGIN_SERVER/$IMAGE_NAME:autoencoder
          docker build -f deployment/Dockerfile -t $IMAGE_TAG .
          echo "$ACR_PASSWORD" | docker login "$ACR_LOGIN_SERVER" -u "$ACR_USERNAME" --password-stdin
          docker push $IMAGE_TAG
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV

  build-and-push-frontend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Log in to ACR
        run: |
          echo "${{ secrets.ACR_PASSWORD }}" | docker login ${{ secrets.ACR_LOGIN_SERVER }} -u ${{ secrets.ACR_USERNAME }} --password-stdin

      - name: Build and push frontend Docker image
        run: |
          FRONTEND_IMAGE=${{ secrets.ACR_LOGIN_SERVER }}/frontend:latest
          docker build -t $FRONTEND_IMAGE -f frontend/Dockerfile frontend
          docker push $FRONTEND_IMAGE
          echo "FRONTEND_IMAGE=$FRONTEND_IMAGE" >> $GITHUB_ENV

  deploy:
    needs: [build-and-train, build-and-push-frontend]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Install Azure CLI v2
        run: |
          set -e
          curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
          az version

      - name: Set AKS context
        uses: azure/aks-set-context@v3
        with:
          cluster-name: ${{ env.CLUSTER_NAME }}
          resource-group: ${{ env.RESOURCE_GROUP }}

      - name: Make apply_all_k8s.sh executable
        run: chmod +x apply_all_k8s.sh

      - name: Apply all Kubernetes manifests
        run: ./apply_all_k8s.sh

      - name: Update backend deployment image
        run: |
          IMAGE_TAG=$ACR_LOGIN_SERVER/$IMAGE_NAME:autoencoder
          kubectl set image deployment/$DEPLOYMENT_NAME $CONTAINER_NAME=$IMAGE_TAG --namespace $NAMESPACE

      - name: Update frontend deployment image
        run: |
          kubectl set image deployment/frontend nginx=$FRONTEND_IMAGE --namespace $NAMESPACE